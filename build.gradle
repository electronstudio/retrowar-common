apply plugin: "kotlin"
apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'

sourceCompatibility = 1.8
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

sourceSets.main.java.srcDirs = ["src/"]
sourceSets.main.resources.srcDirs = ["resources/"]


repositories {
    flatDir {
        dirs '../libs'
    }
}

configurations {
    ktlint
}

task ktlint(type: JavaExec) {
    main = "com.github.shyiko.ktlint.Main"
    classpath = configurations.ktlint
    args "src/**/*.kt"
}

check.dependsOn ktlint

task ktlintFormat(type: JavaExec) {
    main = "com.github.shyiko.ktlint.Main"
    classpath = configurations.ktlint
    args "-F", "src/**/*.kt"
}

dependencies {
    implementation 'io.sentry:sentry:1.7.3'

    compile "uk.co.electronstudio.mobcontrol:mobcontrol:0.1.8"
    //implementation group: 'uk.co.electronstudio.mobcontrol', name: 'mobcontrol', version: '0.1.0'
    implementation group: 'org.eclipse.jetty.websocket', name: 'websocket-api', version: '9.4.24.v20191120'
    implementation group: 'org.eclipse.jetty.websocket', name: 'websocket-server', version: '9.4.24.v20191120'

    implementation "com.code-disaster.steamworks4j:steamworks4j:1.8.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    implementation "net.dermetfan.libgdx-utils:libgdx-utils:$gdxUtilsVersion"
    ktlint 'com.github.shyiko:ktlint:0.34.2'
    implementation("com.esotericsoftware:kryo:4.0.2")
    implementation("com.esotericsoftware:kryonet:2.22.0-RC1") {
        exclude module: 'kryo'
    }
    api "com.badlogicgames.gdx:gdx:$gdxVersion"
    api "com.badlogicgames.gdx:gdx-controllers:$gdxVersion"
    implementation 'com.beust:klaxon:0.30'
    implementation group: 'org.codehaus.groovy', name: 'groovy', version: '2.5.7'
    //compile group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.0'

}

apply plugin: 'org.jetbrains.dokka'

dokka {
    outputFormat = 'javadoc'
    outputDirectory = "$buildDir/javadoc"
    includeNonPublic = false
    skipEmptyPackages = true
    jdkVersion = 8

    externalDocumentationLink {
        // Root URL of the generated documentation to link with. The trailing slash is required!
        url = new URL("https://libgdx.badlogicgames.com/ci/nightlies/docs/api/")
        packageListUrl = new URL("https://libgdx.badlogicgames.com/ci/nightlies/docs/api/package-list")
    }

    packageOptions {
        prefix = "uk.co.electronstudio.retrowar.music"
        suppress = true
    }
    packageOptions {
        prefix = "uk.co.electronstudio.retrowar.menu"
        suppress = true
    }

    packageOptions {
        prefix = "uk.co.electronstudio.retrowar.network"
        suppress = true
    }
    packageOptions {
        prefix = "de.golfgl.gdxgameanalytics"
        suppress = true
    }
}

task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = 'javadoc'
    outputDirectory = "$buildDir/javadoc2"
}

jar {
    manifest {
        attributes 'Implementation-Version': version
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    classifier = 'javadoc'
    from dokkaJavadoc.outputDirectory
}

artifacts {
    archives sourcesJar
    archives javadocJar
}




def pomConfig = {
    licenses {
        license {
            name "Apache License version 2"
            url "https://apache.org/licenses/LICENSE-2.0"
            distribution "repo"
        }
    }
    developers {
        developer {
            id "electronstudio"
            name "Electron Studio"
            email "support@electronstudio.co.uk"
        }
    }

    scm {
        url "https://github.com/electronstudio/"
    }
}

publishing {
    publications {
        mavenPublication(MavenPublication) {
            from components.java
            artifact sourcesJar {
                classifier "sources"
            }
            artifact javadocJar {
                classifier "javadoc"
            }
            groupId 'uk.co.electronstudio.retrowar'
            artifactId 'retrowar-common'
            version version

            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'LibGDX extension library')
                root.appendNode('name', 'retrowar-common')
                root.appendNode('url', 'https://github.com/electronstudio/retrowar-common')
                root.children().last() + pomConfig
            }
        }
    }
  publish.dependsOn jar, sourcesJar, javadocJar, generatePomFileForMavenPublicationPublication
}

String keyString = ''
File file = new File(System.getProperty("user.home")+"/bintray.key")
if(file.exists()){
    keyString = file.text.trim()
}
bintray {
    user = 'electronstudio' //System.getenv('BINTRAY_USER')
    key = keyString //System.getenv('BINTRAY_KEY')
    publications = ['mavenPublication']
    publish = true
    override = true
  pkg {
        repo = 'retrowar'
        name = 'retrowar-common'
     //   userOrg = 'electronstudio'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/electronstudio/retrowar-common.git'
      version {
          name = '1.4.0'
          desc = '1.4.0'
          released = new Date()
          vcsTag = '1.4.0'
      }
    }
}

bintrayUpload.dependsOn publish
